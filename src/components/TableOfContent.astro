---
import { getLangFromUrl, useTranslations } from "../i18n/utils";

export interface Heading {
  slug: string;
  text: string;
  depth: number;
  subheading?: Heading[];
}

type Props = {
  headings: Heading[];
};

const { headings } = Astro.props;
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<style>
  ul {
    list-style: none;
    padding: 0;
    width: fit-content;
  }
  nav {
    padding: var(--padding);
  }
  a {
    text-decoration: none;
    position: relative;
  }

  li {
    border-left: 3px solid #696969;
    padding: 8px 16px;

    &.active {
      border-color: var(--accent);

      a {
        text-decoration: underline;
        text-underline-offset: 8px;
      }
    }
  }
</style>
{
  headings?.length > 0 && (
    <nav class="table-of-content">
      <h5>{t("article.tableOfContent")}</h5>
      <ul>
        {headings
          .filter(({ depth }) => depth <= 3)
          .map((heading) => (
            <li data-href={"#" + heading.slug}>
              <a href={"#" + heading.slug}>{heading.text}</a>
            </li>
          ))}
      </ul>
    </nav>
  )
}
<script>
  function addIntersectionObserver() {
    const observer = new IntersectionObserver((sections) => {
      sections.forEach((section) => {
        const heading = section.target.querySelector("h2, h3, h4, h5");
        const id =
          heading?.getAttribute("id") ?? section.target.getAttribute("id");

        if (!id) return;

        // Get the link to this section's heading
        const link = document.querySelector(
          `nav.table-of-content li[data-href="#${id}"]`
        );
        if (!link) return;

        // Add/remove the .active class based on whether the
        // section is visible
        const addRemove = section.intersectionRatio > 0 ? "add" : "remove";
        link.classList[addRemove]("active");
      });
    });

    document.querySelectorAll(".article section").forEach((section) => {
      observer.observe(section);
    });
  }
  addIntersectionObserver();

  document.addEventListener("astro:after-swap", () => {
    addIntersectionObserver();
  });
</script>
